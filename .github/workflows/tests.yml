name: Automated Tests, Static Analysis, Linting and Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  checks: write
  contents: read

jobs:
  test:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Cache PowerShell Modules
      uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\Documents\PowerShell\Modules
        key: ${{ runner.os }}-psmodules-${{ hashFiles('**/*.ps1', '**/*.psm1') }}

    - name: Install Pester and PSScriptAnalyzer
      shell: pwsh
      run: |
        if (-not (Get-Module -ListAvailable -Name Pester)) {
          Install-Module Pester -Force -SkipPublisherCheck -Scope CurrentUser
        }
        if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
          Install-Module PSScriptAnalyzer -Force -Scope CurrentUser
        }

    - name: Check Scripts (Validate-Scripts.ps1)
      shell: pwsh
      run: ./utils/Validate-Scripts.ps1 -Verbose

    - name: Run Test Suite (tests/Run-Tests.ps1)
      shell: pwsh
      run: ./tests/Run-Tests.ps1 -Verbose

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        # Exclude test files and build artifacts from analysis
        # Test files intentionally use Write-Host for colored output
        $scriptFiles = Get-ChildItem -Recurse -File -Include *.ps1, *.psm1 |
          Where-Object { $_.FullName -notmatch '\.github|tests\\test-data|tests.*\.Tests\.ps1' }

        # Run analyzer on production code only (warnings are informational)
        $results = $scriptFiles | Invoke-ScriptAnalyzer -Recurse -Severity Error
        $allResults = $scriptFiles | Invoke-ScriptAnalyzer -Recurse

        $allResults | ConvertTo-Json -Depth 5 | Out-File analyzer-results.json

        # Only fail on actual errors (Warnings are acceptable and documented in AGENTS.md)
        if ($results -and $results.Count -gt 0) {
          Write-Host "PSScriptAnalyzer Errors Found:" -ForegroundColor Red
          $results | Format-Table
          exit 1
        } else {
          Write-Host "‚úì No PSScriptAnalyzer errors found" -ForegroundColor Green
          if ($allResults -and $allResults.Count -gt 0) {
            $warningCount = ($allResults | Where-Object { $_.Severity -eq 'Warning' }).Count
            Write-Host "  (Note: $warningCount warnings found but not blocking - see analyzer-results.json)" -ForegroundColor Yellow
          }
          exit 0
        }

    - name: Upload Analyzer Results Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: analyzer-results
        path: analyzer-results.json

    - name: Run Pester Tests with Code Coverage
      shell: pwsh
      run: |
        # Create configuration for Pester v5+
        $config = New-PesterConfiguration

        # --- 1. Test sources ---
        # All your test scripts are inside /tests
        $config.Run.Path = 'tests'
        $config.Run.PassThru = $true  # Return results object for exit code handling

        # --- 2. Enable code coverage ---
        $config.CodeCoverage.Enabled = $true

        # --- 3. Paths to cover (production code only) ---
        # Measures ONLY testable, production business logic.
        # INTENTIONALLY EXCLUDES utils (see TESTING.md for detailed explanation)
        $config.CodeCoverage.Path = @(
          'lib'              # Core production modules (target: 80%+)
          'Run.ps1'          # Entry point orchestrator (indirect coverage via lib)
        )

        # --- 4. Test result output (JUnit for GitHub Actions) ---
        $config.TestResult.Enabled = $true
        $config.TestResult.OutputFormat = 'JUnitXml'
        $config.TestResult.OutputPath  = 'test-results.xml'

        # --- 5. Code coverage report (for upload & analysis) ---
        $config.CodeCoverage.OutputPath   = 'coverage.xml'
        $config.CodeCoverage.OutputFormat = 'JaCoCo'

        # --- 6. Run tests ---
        # Note: Utils intentionally excluded from coverage metrics (see TESTING.md#why-utils-have-0-coverage)
        # Pester 5.7.1 doesn't support CodeCoverage.Exclude, so we specify only testable paths above
        $results = Invoke-Pester -Configuration $config
        exit $results.FailedCount

    - name: Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Test Results
        path: test-results.xml
        reporter: java-junit

    - name: Upload Test Results Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-powershell
        path: test-results.xml

    - name: Upload Coverage Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pester-coverage
        path: coverage.xml

    - name: Display Coverage Summary
      if: always()
      shell: pwsh
      run: |
        if (Test-Path coverage.xml) {
          try {
            # Get the LAST (summary) LINE counter from the report
            # JaCoCo structure: multiple counters at different levels, summary is last
            $covNodes = Select-Xml -Path coverage.xml -XPath "//counter[@type='LINE']" |
              Select-Object -ExpandProperty Node

            # Get the last counter (the overall summary at report level)
            $covNode = $covNodes[-1]

            if ($covNode) {
              $covered = [int]$covNode.covered
              $missed = [int]$covNode.missed
              $total = $covered + $missed

              if ($total -gt 0) {
                $percent = [math]::Round(($covered / $total) * 100, 2)
                Write-Host "## Code Coverage: $percent% ($covered of $total lines covered)"
              } else {
                Write-Host "## No coverage data found (coverage.xml is empty or has no counters)"
              }
            } else {
              Write-Host "## No LINE counter found in coverage.xml"
            }
          } catch {
            Write-Host "## Error parsing coverage data: $_"
          }
        } else {
          Write-Host "## Coverage file not found (coverage.xml not generated)"
        }
    
    - name: Print Summary Report
      if: always()
      shell: pwsh
      run: |
        Write-Host "### üß™ Test & Coverage Summary"

        # Load test results
        if (Test-Path test-results.xml) {
          [xml]$tr = Get-Content test-results.xml
          $executed = ($tr.testsuites.testsuite | Measure-Object -Sum tests).Sum
          $failed   = ($tr.testsuites.testsuite | Measure-Object -Sum failures).Sum
          $passed   = $executed - $failed
        } else {
          $executed = 0; $failed = 0; $passed = 0
        }

        # Load coverage results
        if (Test-Path coverage.xml) {
          try {
            # Get the LAST (summary) LINE counter from report root level
            $covNodes = Select-Xml -Path coverage.xml -XPath "//counter[@type='LINE']" |
              Select-Object -ExpandProperty Node

            if ($covNodes) {
              # Get the last counter (the overall summary at report level)
              $c = $covNodes[-1]
              $covered = [int]$c.covered
              $missed  = [int]$c.missed
              $total   = $covered + $missed
              if ($total -gt 0) {
                $covPct = [math]::Round( ($covered / $total) * 100, 2 )
              } else {
                $covPct = 0
              }
            } else {
              $covered = 0; $missed = 0; $covPct = 0
            }
          } catch {
            $covered = 0; $missed = 0; $covPct = 0
          }
        } else {
          $covered = 0; $missed = 0; $covPct = 0
        }

        Write-Host ""
        Write-Host "| Metric        | Value             |"
        Write-Host "|---------------|-------------------|"
        Write-Host ("| Tests Run      | {0}" -f $executed)
        Write-Host ("| Tests Passed   | {0}" -f $passed)
        Write-Host ("| Tests Failed   | {0}" -f $failed)
        Write-Host ("| Coverage %     | {0}%" -f $covPct)
        Write-Host ""
        if ($failed -gt 0 -or $covPct -lt 80) {
          Write-Host "‚ö†Ô∏è **Attention**: Some tests failed or coverage is below threshold."
        } else {
          Write-Host "‚úÖ All tests passed and coverage is above threshold."
        }

  quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Lint Markdown Files
      uses: nosborn/github-action-markdown-cli@v3.3.0
      with:
        files: .
